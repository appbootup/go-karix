// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateWebhook create webhook
// swagger:model CreateWebhook
type CreateWebhook struct {

	// Display name of the webhook
	// Required: true
	Name *string `json:"name"`

	// HTTP method to use for fallback notification url
	SmsNotificationFallbackMethod *string `json:"sms_notification_fallback_method,omitempty"`

	// In case the service for `sms_notification_url` is down Karix will hit the
	// fallback url with the incoming message details
	//
	SmsNotificationFallbackURL *string `json:"sms_notification_fallback_url,omitempty"`

	// HTTP method to use for notifying API url in case of inbound message
	// Required: true
	SmsNotificationMethod *string `json:"sms_notification_method"`

	// API url to notify in case of inbound message
	// Required: true
	SmsNotificationURL *string `json:"sms_notification_url"`
}

// Validate validates this create webhook
func (m *CreateWebhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSmsNotificationMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSmsNotificationURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateWebhook) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateWebhook) validateSmsNotificationMethod(formats strfmt.Registry) error {

	if err := validate.Required("sms_notification_method", "body", m.SmsNotificationMethod); err != nil {
		return err
	}

	return nil
}

func (m *CreateWebhook) validateSmsNotificationURL(formats strfmt.Registry) error {

	if err := validate.Required("sms_notification_url", "body", m.SmsNotificationURL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateWebhook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateWebhook) UnmarshalBinary(b []byte) error {
	var res CreateWebhook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
