// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMessage create message
// swagger:model CreateMessage
type CreateMessage struct {

	// The destination numbers for the message.
	//
	// Required: true
	// Min Items: 1
	// Unique: true
	Destination []string `json:"destination"`

	// The HTTP method which be be used to send the notification.
	// Defaults to POST if `notification_url` is specified.
	//
	// Enum: [GET POST]
	NotificationMethod string `json:"notification_method,omitempty"`

	// URL on which message status change notifications will be sent
	NotificationURL string `json:"notification_url,omitempty"`

	// Sender ID for the message which will be displayed to the receiver. It
	// should specification E.164 with international calling codes.
	//   - When sending a message to US/Canada, the Sender ID must be a number
	//     which belongs to your Karix Subaccount (or main account).
	//
	// Required: true
	Source *string `json:"source"`

	// text
	// Required: true
	// Min Length: 1
	Text *string `json:"text"`
}

// Validate validates this create message
func (m *CreateMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMessage) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	iDestinationSize := int64(len(m.Destination))

	if err := validate.MinItems("destination", "body", iDestinationSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("destination", "body", m.Destination); err != nil {
		return err
	}

	return nil
}

var createMessageTypeNotificationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET","POST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMessageTypeNotificationMethodPropEnum = append(createMessageTypeNotificationMethodPropEnum, v)
	}
}

const (

	// CreateMessageNotificationMethodGET captures enum value "GET"
	CreateMessageNotificationMethodGET string = "GET"

	// CreateMessageNotificationMethodPOST captures enum value "POST"
	CreateMessageNotificationMethodPOST string = "POST"
)

// prop value enum
func (m *CreateMessage) validateNotificationMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createMessageTypeNotificationMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateMessage) validateNotificationMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.NotificationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateNotificationMethodEnum("notification_method", "body", m.NotificationMethod); err != nil {
		return err
	}

	return nil
}

func (m *CreateMessage) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *CreateMessage) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	if err := validate.MinLength("text", "body", string(*m.Text), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMessage) UnmarshalBinary(b []byte) error {
	var res CreateMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
