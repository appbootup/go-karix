// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateAccount create account
// swagger:model CreateAccount
type CreateAccount struct {

	// Name of the account. Must be unique within the parent account.
	//
	// Required: true
	// Max Length: 200
	Name *string `json:"name"`

	// Status of your account. Possible values are:
	//   - enabled: Account is ready to be used
	//   - suspended: Account has been temporarily suspended
	//   - disabled: Account has been permanently disabled and
	//             cannot be revived. All resources like numbers
	//             allocated to the subaccount will not be deleted
	//             and can be transferred to an enabled account.
	//   `suspended` and `disabled` accounts cannot use Karix API. They will receive
	//   `403 Forbidden` response.
	//
	Status *string `json:"status,omitempty"`
}

// Validate validates this create account
func (m *CreateAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateAccount) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 200); err != nil {
		return err
	}

	return nil
}

var createAccountTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","suspended","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createAccountTypeStatusPropEnum = append(createAccountTypeStatusPropEnum, v)
	}
}

const (

	// CreateAccountStatusEnabled captures enum value "enabled"
	CreateAccountStatusEnabled string = "enabled"

	// CreateAccountStatusSuspended captures enum value "suspended"
	CreateAccountStatusSuspended string = "suspended"

	// CreateAccountStatusDisabled captures enum value "disabled"
	CreateAccountStatusDisabled string = "disabled"
)

// prop value enum
func (m *CreateAccount) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createAccountTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateAccount) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateAccount) UnmarshalBinary(b []byte) error {
	var res CreateAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
