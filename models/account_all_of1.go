// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountAllOf1 account all of1
// swagger:model accountAllOf1
type AccountAllOf1 struct {

	// Signifies whether the account is prepaid, postpaid or trial
	//
	AccountType string `json:"account_type,omitempty"`

	// Whether auto-recharge has been enabled.
	//
	AutoRecharge bool `json:"auto_recharge,omitempty"`

	// Date when this account was created
	CreatedTime strfmt.DateTime `json:"created_time,omitempty"`

	// Account's credit balance in US dollars.
	//   - For postpaid accounts this value will be `null`.
	//   - For subaccounts this value will reflect balance of parent account
	//
	CreditBalance string `json:"credit_balance,omitempty"`

	// There is generally only one parent account in list. Rest are child subaccounts. Possible values:
	//   - `true`: If the account is a parent account
	//   - `false`: If the account is a subaccount of the parent account
	//
	IsParent bool `json:"is_parent,omitempty"`

	// Token password for this account. Used as password in Basic Authentication
	//
	Token string `json:"token,omitempty"`

	// Alphanumeric user identification. Used as username for Basic Authentication
	//
	UID string `json:"uid,omitempty"`

	// Date when this account was last updated
	UpdatedTime strfmt.DateTime `json:"updated_time,omitempty"`
}

// Validate validates this account all of1
func (m *AccountAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var accountAllOf1TypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["prepaid","postpaid","trial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountAllOf1TypeAccountTypePropEnum = append(accountAllOf1TypeAccountTypePropEnum, v)
	}
}

const (

	// AccountAllOf1AccountTypePrepaid captures enum value "prepaid"
	AccountAllOf1AccountTypePrepaid string = "prepaid"

	// AccountAllOf1AccountTypePostpaid captures enum value "postpaid"
	AccountAllOf1AccountTypePostpaid string = "postpaid"

	// AccountAllOf1AccountTypeTrial captures enum value "trial"
	AccountAllOf1AccountTypeTrial string = "trial"
)

// prop value enum
func (m *AccountAllOf1) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountAllOf1TypeAccountTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountAllOf1) validateAccountType(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccountTypeEnum("account_type", "body", m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *AccountAllOf1) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountAllOf1) validateUpdatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_time", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAllOf1) UnmarshalBinary(b []byte) error {
	var res AccountAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
