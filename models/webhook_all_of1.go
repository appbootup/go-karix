// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebhookAllOf1 webhook all of1
// swagger:model webhookAllOf1
type WebhookAllOf1 struct {

	// UID of Account which created this webhook
	AccountUID string `json:"account_uid,omitempty"`

	// Date when this webhook was created
	CreatedTime strfmt.DateTime `json:"created_time,omitempty"`

	// Unique ID of the webhook
	UID string `json:"uid,omitempty"`

	// Date when this webhook was last updated
	UpdatedTime *strfmt.DateTime `json:"updated_time,omitempty"`
}

// Validate validates this webhook all of1
func (m *WebhookAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookAllOf1) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("created_time", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WebhookAllOf1) validateUpdatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_time", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebhookAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookAllOf1) UnmarshalBinary(b []byte) error {
	var res WebhookAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
