// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMessageParams creates a new GetMessageParams object
// with the default values initialized.
func NewGetMessageParams() *GetMessageParams {
	var (
		aPIVersionDefault = string("1.0")
		limitDefault      = int64(10)
		offsetDefault     = int64(0)
	)
	return &GetMessageParams{
		APIVersion: &aPIVersionDefault,
		Limit:      &limitDefault,
		Offset:     &offsetDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMessageParamsWithTimeout creates a new GetMessageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMessageParamsWithTimeout(timeout time.Duration) *GetMessageParams {
	var (
		aPIVersionDefault = string("1.0")
		limitDefault      = int64(10)
		offsetDefault     = int64(0)
	)
	return &GetMessageParams{
		APIVersion: &aPIVersionDefault,
		Limit:      &limitDefault,
		Offset:     &offsetDefault,

		timeout: timeout,
	}
}

// NewGetMessageParamsWithContext creates a new GetMessageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMessageParamsWithContext(ctx context.Context) *GetMessageParams {
	var (
		apiVersionDefault = string("1.0")
		limitDefault      = int64(10)
		offsetDefault     = int64(0)
	)
	return &GetMessageParams{
		APIVersion: &apiVersionDefault,
		Limit:      &limitDefault,
		Offset:     &offsetDefault,

		Context: ctx,
	}
}

// NewGetMessageParamsWithHTTPClient creates a new GetMessageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMessageParamsWithHTTPClient(client *http.Client) *GetMessageParams {
	var (
		apiVersionDefault = string("1.0")
		limitDefault      = int64(10)
		offsetDefault     = int64(0)
	)
	return &GetMessageParams{
		APIVersion: &apiVersionDefault,
		Limit:      &limitDefault,
		Offset:     &offsetDefault,
		HTTPClient: client,
	}
}

/*GetMessageParams contains all the parameters to send to the API endpoint
for the get message operation typically these are written to a http.Request
*/
type GetMessageParams struct {

	/*AccountUID
	  Filter the result list by the account which sent the message
	- If not provided or `null` or empty string, no filter will be placed
	  and all the messages by the main account and its subaccounts are returned
	- To get the list of messages sent by main account only, set `account_uid`
	  to main account's uid.


	*/
	AccountUID *string
	/*APIVersion
	  API Version. If not specified your pinned verison is used.

	*/
	APIVersion *string
	/*Direction
	  Message direction, inbound or outbound to filter on.
	If not provided, the filter is not applied.


	*/
	Direction *string
	/*Limit
	  The numbers of items to return.

	*/
	Limit *int64
	/*Offset
	  The number of items to skip before starting to collect the result set.

	*/
	Offset *int64
	/*State
	  Filter the result on the basis of message state.


	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get message params
func (o *GetMessageParams) WithTimeout(timeout time.Duration) *GetMessageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get message params
func (o *GetMessageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get message params
func (o *GetMessageParams) WithContext(ctx context.Context) *GetMessageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get message params
func (o *GetMessageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get message params
func (o *GetMessageParams) WithHTTPClient(client *http.Client) *GetMessageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get message params
func (o *GetMessageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountUID adds the accountUID to the get message params
func (o *GetMessageParams) WithAccountUID(accountUID *string) *GetMessageParams {
	o.SetAccountUID(accountUID)
	return o
}

// SetAccountUID adds the accountUid to the get message params
func (o *GetMessageParams) SetAccountUID(accountUID *string) {
	o.AccountUID = accountUID
}

// WithAPIVersion adds the aPIVersion to the get message params
func (o *GetMessageParams) WithAPIVersion(aPIVersion *string) *GetMessageParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get message params
func (o *GetMessageParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithDirection adds the direction to the get message params
func (o *GetMessageParams) WithDirection(direction *string) *GetMessageParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the get message params
func (o *GetMessageParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithLimit adds the limit to the get message params
func (o *GetMessageParams) WithLimit(limit *int64) *GetMessageParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get message params
func (o *GetMessageParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get message params
func (o *GetMessageParams) WithOffset(offset *int64) *GetMessageParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get message params
func (o *GetMessageParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithState adds the state to the get message params
func (o *GetMessageParams) WithState(state *string) *GetMessageParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get message params
func (o *GetMessageParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetMessageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountUID != nil {

		// query param account_uid
		var qrAccountUID string
		if o.AccountUID != nil {
			qrAccountUID = *o.AccountUID
		}
		qAccountUID := qrAccountUID
		if qAccountUID != "" {
			if err := r.SetQueryParam("account_uid", qAccountUID); err != nil {
				return err
			}
		}

	}

	if o.APIVersion != nil {

		// header param api-version
		if err := r.SetHeaderParam("api-version", *o.APIVersion); err != nil {
			return err
		}

	}

	if o.Direction != nil {

		// query param direction
		var qrDirection string
		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {
			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
