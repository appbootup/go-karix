// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// SendMessageReader is a Reader for the SendMessage structure.
type SendMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewSendMessageAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSendMessageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSendMessageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewSendMessagePaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSendMessageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSendMessageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSendMessageAccepted creates a SendMessageAccepted with default headers values
func NewSendMessageAccepted() *SendMessageAccepted {
	return &SendMessageAccepted{}
}

/*SendMessageAccepted handles this case with default header values.

A list of message records
*/
type SendMessageAccepted struct {
	Payload *models.SendMessageAcceptedBody
}

func (o *SendMessageAccepted) Error() string {
	return fmt.Sprintf("[POST /message/][%d] sendMessageAccepted  %+v", 202, o.Payload)
}

func (o *SendMessageAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SendMessageAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMessageBadRequest creates a SendMessageBadRequest with default headers values
func NewSendMessageBadRequest() *SendMessageBadRequest {
	return &SendMessageBadRequest{}
}

/*SendMessageBadRequest handles this case with default header values.

Error
*/
type SendMessageBadRequest struct {
	Payload *models.SendMessageBadRequestBody
}

func (o *SendMessageBadRequest) Error() string {
	return fmt.Sprintf("[POST /message/][%d] sendMessageBadRequest  %+v", 400, o.Payload)
}

func (o *SendMessageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SendMessageBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMessageUnauthorized creates a SendMessageUnauthorized with default headers values
func NewSendMessageUnauthorized() *SendMessageUnauthorized {
	return &SendMessageUnauthorized{}
}

/*SendMessageUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type SendMessageUnauthorized struct {
	WWWAuthenticate string
}

func (o *SendMessageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /message/][%d] sendMessageUnauthorized ", 401)
}

func (o *SendMessageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewSendMessagePaymentRequired creates a SendMessagePaymentRequired with default headers values
func NewSendMessagePaymentRequired() *SendMessagePaymentRequired {
	return &SendMessagePaymentRequired{}
}

/*SendMessagePaymentRequired handles this case with default header values.

Insufficient Balance Error
*/
type SendMessagePaymentRequired struct {
	Payload *models.SendMessagePaymentRequiredBody
}

func (o *SendMessagePaymentRequired) Error() string {
	return fmt.Sprintf("[POST /message/][%d] sendMessagePaymentRequired  %+v", 402, o.Payload)
}

func (o *SendMessagePaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SendMessagePaymentRequiredBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMessageForbidden creates a SendMessageForbidden with default headers values
func NewSendMessageForbidden() *SendMessageForbidden {
	return &SendMessageForbidden{}
}

/*SendMessageForbidden handles this case with default header values.

User not authorized or blocked
*/
type SendMessageForbidden struct {
	Payload *models.SendMessageForbiddenBody
}

func (o *SendMessageForbidden) Error() string {
	return fmt.Sprintf("[POST /message/][%d] sendMessageForbidden  %+v", 403, o.Payload)
}

func (o *SendMessageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SendMessageForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMessageInternalServerError creates a SendMessageInternalServerError with default headers values
func NewSendMessageInternalServerError() *SendMessageInternalServerError {
	return &SendMessageInternalServerError{}
}

/*SendMessageInternalServerError handles this case with default header values.

Error
*/
type SendMessageInternalServerError struct {
	Payload *models.SendMessageInternalServerErrorBody
}

func (o *SendMessageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /message/][%d] sendMessageInternalServerError  %+v", 500, o.Payload)
}

func (o *SendMessageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SendMessageInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
