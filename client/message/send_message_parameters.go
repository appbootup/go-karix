// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// NewSendMessageParams creates a new SendMessageParams object
// with the default values initialized.
func NewSendMessageParams() *SendMessageParams {
	var (
		aPIVersionDefault = string("1.0")
	)
	return &SendMessageParams{
		APIVersion: &aPIVersionDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSendMessageParamsWithTimeout creates a new SendMessageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSendMessageParamsWithTimeout(timeout time.Duration) *SendMessageParams {
	var (
		aPIVersionDefault = string("1.0")
	)
	return &SendMessageParams{
		APIVersion: &aPIVersionDefault,

		timeout: timeout,
	}
}

// NewSendMessageParamsWithContext creates a new SendMessageParams object
// with the default values initialized, and the ability to set a context for a request
func NewSendMessageParamsWithContext(ctx context.Context) *SendMessageParams {
	var (
		apiVersionDefault = string("1.0")
	)
	return &SendMessageParams{
		APIVersion: &apiVersionDefault,

		Context: ctx,
	}
}

// NewSendMessageParamsWithHTTPClient creates a new SendMessageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSendMessageParamsWithHTTPClient(client *http.Client) *SendMessageParams {
	var (
		apiVersionDefault = string("1.0")
	)
	return &SendMessageParams{
		APIVersion: &apiVersionDefault,
		HTTPClient: client,
	}
}

/*SendMessageParams contains all the parameters to send to the API endpoint
for the send message operation typically these are written to a http.Request
*/
type SendMessageParams struct {

	/*APIVersion
	  API Version. If not specified your pinned verison is used.

	*/
	APIVersion *string
	/*Message
	  Create Message object

	*/
	Message *models.CreateMessage

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the send message params
func (o *SendMessageParams) WithTimeout(timeout time.Duration) *SendMessageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the send message params
func (o *SendMessageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the send message params
func (o *SendMessageParams) WithContext(ctx context.Context) *SendMessageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the send message params
func (o *SendMessageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the send message params
func (o *SendMessageParams) WithHTTPClient(client *http.Client) *SendMessageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the send message params
func (o *SendMessageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the send message params
func (o *SendMessageParams) WithAPIVersion(aPIVersion *string) *SendMessageParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the send message params
func (o *SendMessageParams) SetAPIVersion(aPIVersion *string) {
	o.APIVersion = aPIVersion
}

// WithMessage adds the message to the send message params
func (o *SendMessageParams) WithMessage(message *models.CreateMessage) *SendMessageParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the send message params
func (o *SendMessageParams) SetMessage(message *models.CreateMessage) {
	o.Message = message
}

// WriteToRequest writes these params to a swagger request
func (o *SendMessageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIVersion != nil {

		// header param api-version
		if err := r.SetHeaderParam("api-version", *o.APIVersion); err != nil {
			return err
		}

	}

	if o.Message != nil {
		if err := r.SetBodyParam(o.Message); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
