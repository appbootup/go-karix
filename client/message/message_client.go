// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new message API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for message API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetMessage gets list of messages sent or received

Get list of messages sent or received.
Sorted by descending order of `queued_time`
(latest messages are first)

*/
func (a *Client) GetMessage(params *GetMessageParams, authInfo runtime.ClientAuthInfoWriter) (*GetMessageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMessage",
		Method:             "GET",
		PathPattern:        "/message/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMessageOK), nil

}

/*
GetMessageByID gets message details by id

Get message details by id.
*/
func (a *Client) GetMessageByID(params *GetMessageByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMessageByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMessageByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMessageById",
		Method:             "GET",
		PathPattern:        "/message/{uid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMessageByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMessageByIDOK), nil

}

/*
SendMessage sends a message to a list of phone numbers

Send a message to a list of destinations.
  - A successful `202` response means that a message record has been created in Karix.
    It does not mean that each message was successfully `queued`, `sent` or `delivered`.
  - To know the status of the message check the parameter `status` of the message record.
  - Message records might be created with a `failed` state due issues with Karix or
    validation issues. Please check `error` to know the reason of the failure.
    No balance is deducted and `total_cost` is always zero for such cases.
  - Message records might be updated to state `undelivered`. This is due to carrier/operator
    related issues. Please check `error` to know the reason of the failure.
    Balance is still deducted for such cases.
  - Since this is a bulk API the response structure follows the List Response format
    rather than the Single Response format.
  - Once queued, the messages for your account are dequeued and processed at a
    rate set for your account (defaults to 5 messages per second).
    Contact [sales](http://karix.io/messaging/contact-us/) to get your rate limit increased.
  - For fair usage, there is no rate limiting for queueing messages using this
    API. Dequeue rate would still be applicable as stated.

*/
func (a *Client) SendMessage(params *SendMessageParams, authInfo runtime.ClientAuthInfoWriter) (*SendMessageAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendMessage",
		Method:             "POST",
		PathPattern:        "/message/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendMessageAccepted), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
