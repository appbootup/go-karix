// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// GetMessageReader is a Reader for the GetMessage structure.
type GetMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetMessageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetMessageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetMessageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetMessageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMessageOK creates a GetMessageOK with default headers values
func NewGetMessageOK() *GetMessageOK {
	return &GetMessageOK{}
}

/*GetMessageOK handles this case with default header values.

A list of Message objects
*/
type GetMessageOK struct {
	Payload *GetMessageOKBody
}

func (o *GetMessageOK) Error() string {
	return fmt.Sprintf("[GET /message/][%d] getMessageOK  %+v", 200, o.Payload)
}

func (o *GetMessageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMessageOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessageUnauthorized creates a GetMessageUnauthorized with default headers values
func NewGetMessageUnauthorized() *GetMessageUnauthorized {
	return &GetMessageUnauthorized{}
}

/*GetMessageUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type GetMessageUnauthorized struct {
	WWWAuthenticate string
}

func (o *GetMessageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /message/][%d] getMessageUnauthorized ", 401)
}

func (o *GetMessageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewGetMessageForbidden creates a GetMessageForbidden with default headers values
func NewGetMessageForbidden() *GetMessageForbidden {
	return &GetMessageForbidden{}
}

/*GetMessageForbidden handles this case with default header values.

User not authorized or blocked
*/
type GetMessageForbidden struct {
	Payload *GetMessageForbiddenBody
}

func (o *GetMessageForbidden) Error() string {
	return fmt.Sprintf("[GET /message/][%d] getMessageForbidden  %+v", 403, o.Payload)
}

func (o *GetMessageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMessageForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessageInternalServerError creates a GetMessageInternalServerError with default headers values
func NewGetMessageInternalServerError() *GetMessageInternalServerError {
	return &GetMessageInternalServerError{}
}

/*GetMessageInternalServerError handles this case with default header values.

Error
*/
type GetMessageInternalServerError struct {
	Payload *GetMessageInternalServerErrorBody
}

func (o *GetMessageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /message/][%d] getMessageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMessageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMessageInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetMessageForbiddenBody UnauthorizedResponse
swagger:model GetMessageForbiddenBody
*/
type GetMessageForbiddenBody struct {

	// error
	Error *GetMessageForbiddenBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this get message forbidden body
func (o *GetMessageForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMessageForbiddenBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getMessageForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetMessageForbiddenBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getMessageForbidden" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMessageForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMessageForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetMessageForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetMessageForbiddenBodyError get message forbidden body error
swagger:model GetMessageForbiddenBodyError
*/
type GetMessageForbiddenBodyError struct {

	// Forbidden Message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get message forbidden body error
func (o *GetMessageForbiddenBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMessageForbiddenBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getMessageForbidden"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMessageForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMessageForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res GetMessageForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetMessageInternalServerErrorBody ErrorResponse
swagger:model GetMessageInternalServerErrorBody
*/
type GetMessageInternalServerErrorBody struct {

	// error
	Error *GetMessageInternalServerErrorBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this get message internal server error body
func (o *GetMessageInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMessageInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getMessageInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetMessageInternalServerErrorBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getMessageInternalServerError" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMessageInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMessageInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetMessageInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetMessageInternalServerErrorBodyError get message internal server error body error
swagger:model GetMessageInternalServerErrorBodyError
*/
type GetMessageInternalServerErrorBodyError struct {

	// Error Message
	// Required: true
	Message *string `json:"message"`

	// Parameter the error message is related to
	// `null` is the error is generic
	//
	Param *string `json:"param,omitempty"`
}

// Validate validates this get message internal server error body error
func (o *GetMessageInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMessageInternalServerErrorBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getMessageInternalServerError"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMessageInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMessageInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res GetMessageInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetMessageOKBody MessageListResponse
swagger:model GetMessageOKBody
*/
type GetMessageOKBody struct {

	// meta
	Meta *models.ArrayMetaResponse `json:"meta,omitempty"`

	// objects
	Objects []*models.Message `json:"objects"`
}

// Validate validates this get message o k body
func (o *GetMessageOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMessageOKBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getMessageOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

func (o *GetMessageOKBody) validateObjects(formats strfmt.Registry) error {

	if swag.IsZero(o.Objects) { // not required
		return nil
	}

	for i := 0; i < len(o.Objects); i++ {
		if swag.IsZero(o.Objects[i]) { // not required
			continue
		}

		if o.Objects[i] != nil {
			if err := o.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMessageOK" + "." + "objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMessageOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMessageOKBody) UnmarshalBinary(b []byte) error {
	var res GetMessageOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
