// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// GetMessageReader is a Reader for the GetMessage structure.
type GetMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetMessageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetMessageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetMessageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetMessageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMessageOK creates a GetMessageOK with default headers values
func NewGetMessageOK() *GetMessageOK {
	return &GetMessageOK{}
}

/*GetMessageOK handles this case with default header values.

A list of Message objects
*/
type GetMessageOK struct {
	Payload *models.GetMessageOKBody
}

func (o *GetMessageOK) Error() string {
	return fmt.Sprintf("[GET /message/][%d] getMessageOK  %+v", 200, o.Payload)
}

func (o *GetMessageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetMessageOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessageUnauthorized creates a GetMessageUnauthorized with default headers values
func NewGetMessageUnauthorized() *GetMessageUnauthorized {
	return &GetMessageUnauthorized{}
}

/*GetMessageUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type GetMessageUnauthorized struct {
	WWWAuthenticate string
}

func (o *GetMessageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /message/][%d] getMessageUnauthorized ", 401)
}

func (o *GetMessageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewGetMessageForbidden creates a GetMessageForbidden with default headers values
func NewGetMessageForbidden() *GetMessageForbidden {
	return &GetMessageForbidden{}
}

/*GetMessageForbidden handles this case with default header values.

User not authorized or blocked
*/
type GetMessageForbidden struct {
	Payload *models.GetMessageForbiddenBody
}

func (o *GetMessageForbidden) Error() string {
	return fmt.Sprintf("[GET /message/][%d] getMessageForbidden  %+v", 403, o.Payload)
}

func (o *GetMessageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetMessageForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessageInternalServerError creates a GetMessageInternalServerError with default headers values
func NewGetMessageInternalServerError() *GetMessageInternalServerError {
	return &GetMessageInternalServerError{}
}

/*GetMessageInternalServerError handles this case with default header values.

Error
*/
type GetMessageInternalServerError struct {
	Payload *models.GetMessageInternalServerErrorBody
}

func (o *GetMessageInternalServerError) Error() string {
	return fmt.Sprintf("[GET /message/][%d] getMessageInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMessageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetMessageInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
