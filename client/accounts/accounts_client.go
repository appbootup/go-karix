// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSubaccount creates a new subaccount

Create a new subaccount under your account
*/
func (a *Client) CreateSubaccount(params *CreateSubaccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubaccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSubaccount",
		Method:             "POST",
		PathPattern:        "/account/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSubaccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSubaccountCreated), nil

}

/*
GetSubaccount gets a list of accounts

Get a list of details of all subaccounts, including the main account. Accounts are sorted by last updated time.
*/
func (a *Client) GetSubaccount(params *GetSubaccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubaccount",
		Method:             "GET",
		PathPattern:        "/account/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubaccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubaccountOK), nil

}

/*
GetSubaccountByID gets details of an account

Get details of an account by its uid. Both main account and subaccounts
can be fetched using their uids.

*/
func (a *Client) GetSubaccountByID(params *GetSubaccountByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubaccountByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubaccountByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubaccountById",
		Method:             "GET",
		PathPattern:        "/account/{uid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubaccountByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubaccountByIDOK), nil

}

/*
PatchSubaccount edits an account

Edit details of your account or its subaccount
  - An account can only change the status of subaccounts under it.
    It cant change its own status
  - A parent account can edit its own details and the details of its subaccounts

*/
func (a *Client) PatchSubaccount(params *PatchSubaccountParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSubaccount",
		Method:             "PATCH",
		PathPattern:        "/account/{uid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSubaccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSubaccountOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
