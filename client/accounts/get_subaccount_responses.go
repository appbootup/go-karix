// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// GetSubaccountReader is a Reader for the GetSubaccount structure.
type GetSubaccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubaccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSubaccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetSubaccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSubaccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSubaccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSubaccountOK creates a GetSubaccountOK with default headers values
func NewGetSubaccountOK() *GetSubaccountOK {
	return &GetSubaccountOK{}
}

/*GetSubaccountOK handles this case with default header values.

A list of account objects
*/
type GetSubaccountOK struct {
	Payload *GetSubaccountOKBody
}

func (o *GetSubaccountOK) Error() string {
	return fmt.Sprintf("[GET /account/][%d] getSubaccountOK  %+v", 200, o.Payload)
}

func (o *GetSubaccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubaccountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubaccountUnauthorized creates a GetSubaccountUnauthorized with default headers values
func NewGetSubaccountUnauthorized() *GetSubaccountUnauthorized {
	return &GetSubaccountUnauthorized{}
}

/*GetSubaccountUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type GetSubaccountUnauthorized struct {
	WWWAuthenticate string
}

func (o *GetSubaccountUnauthorized) Error() string {
	return fmt.Sprintf("[GET /account/][%d] getSubaccountUnauthorized ", 401)
}

func (o *GetSubaccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewGetSubaccountForbidden creates a GetSubaccountForbidden with default headers values
func NewGetSubaccountForbidden() *GetSubaccountForbidden {
	return &GetSubaccountForbidden{}
}

/*GetSubaccountForbidden handles this case with default header values.

User not authorized or blocked
*/
type GetSubaccountForbidden struct {
	Payload *GetSubaccountForbiddenBody
}

func (o *GetSubaccountForbidden) Error() string {
	return fmt.Sprintf("[GET /account/][%d] getSubaccountForbidden  %+v", 403, o.Payload)
}

func (o *GetSubaccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubaccountForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubaccountInternalServerError creates a GetSubaccountInternalServerError with default headers values
func NewGetSubaccountInternalServerError() *GetSubaccountInternalServerError {
	return &GetSubaccountInternalServerError{}
}

/*GetSubaccountInternalServerError handles this case with default header values.

Error
*/
type GetSubaccountInternalServerError struct {
	Payload *GetSubaccountInternalServerErrorBody
}

func (o *GetSubaccountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /account/][%d] getSubaccountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSubaccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubaccountInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSubaccountForbiddenBody UnauthorizedResponse
swagger:model GetSubaccountForbiddenBody
*/
type GetSubaccountForbiddenBody struct {

	// error
	Error *GetSubaccountForbiddenBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this get subaccount forbidden body
func (o *GetSubaccountForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountForbiddenBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubaccountForbiddenBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountForbidden" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetSubaccountForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountForbiddenBodyError get subaccount forbidden body error
swagger:model GetSubaccountForbiddenBodyError
*/
type GetSubaccountForbiddenBodyError struct {

	// Forbidden Message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get subaccount forbidden body error
func (o *GetSubaccountForbiddenBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountForbiddenBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSubaccountForbidden"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res GetSubaccountForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountInternalServerErrorBody ErrorResponse
swagger:model GetSubaccountInternalServerErrorBody
*/
type GetSubaccountInternalServerErrorBody struct {

	// error
	Error *GetSubaccountInternalServerErrorBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this get subaccount internal server error body
func (o *GetSubaccountInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubaccountInternalServerErrorBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountInternalServerError" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetSubaccountInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountInternalServerErrorBodyError get subaccount internal server error body error
swagger:model GetSubaccountInternalServerErrorBodyError
*/
type GetSubaccountInternalServerErrorBodyError struct {

	// Error Message
	// Required: true
	Message *string `json:"message"`

	// Parameter the error message is related to
	// `null` is the error is generic
	//
	Param *string `json:"param,omitempty"`
}

// Validate validates this get subaccount internal server error body error
func (o *GetSubaccountInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountInternalServerErrorBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSubaccountInternalServerError"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res GetSubaccountInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountOKBody AccountListResponse
swagger:model GetSubaccountOKBody
*/
type GetSubaccountOKBody struct {

	// meta
	Meta *models.ArrayMetaResponse `json:"meta,omitempty"`

	// objects
	Objects []*models.Account `json:"objects"`
}

// Validate validates this get subaccount o k body
func (o *GetSubaccountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountOKBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubaccountOKBody) validateObjects(formats strfmt.Registry) error {

	if swag.IsZero(o.Objects) { // not required
		return nil
	}

	for i := 0; i < len(o.Objects); i++ {
		if swag.IsZero(o.Objects[i]) { // not required
			continue
		}

		if o.Objects[i] != nil {
			if err := o.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSubaccountOK" + "." + "objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountOKBody) UnmarshalBinary(b []byte) error {
	var res GetSubaccountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
