// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// PatchSubaccountReader is a Reader for the PatchSubaccount structure.
type PatchSubaccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSubaccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchSubaccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchSubaccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchSubaccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchSubaccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchSubaccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchSubaccountOK creates a PatchSubaccountOK with default headers values
func NewPatchSubaccountOK() *PatchSubaccountOK {
	return &PatchSubaccountOK{}
}

/*PatchSubaccountOK handles this case with default header values.

OK
*/
type PatchSubaccountOK struct {
	Payload *models.PatchSubaccountOKBody
}

func (o *PatchSubaccountOK) Error() string {
	return fmt.Sprintf("[PATCH /account/{uid}/][%d] patchSubaccountOK  %+v", 200, o.Payload)
}

func (o *PatchSubaccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchSubaccountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSubaccountUnauthorized creates a PatchSubaccountUnauthorized with default headers values
func NewPatchSubaccountUnauthorized() *PatchSubaccountUnauthorized {
	return &PatchSubaccountUnauthorized{}
}

/*PatchSubaccountUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type PatchSubaccountUnauthorized struct {
	WWWAuthenticate string
}

func (o *PatchSubaccountUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /account/{uid}/][%d] patchSubaccountUnauthorized ", 401)
}

func (o *PatchSubaccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewPatchSubaccountForbidden creates a PatchSubaccountForbidden with default headers values
func NewPatchSubaccountForbidden() *PatchSubaccountForbidden {
	return &PatchSubaccountForbidden{}
}

/*PatchSubaccountForbidden handles this case with default header values.

User not authorized or blocked
*/
type PatchSubaccountForbidden struct {
	Payload *models.PatchSubaccountForbiddenBody
}

func (o *PatchSubaccountForbidden) Error() string {
	return fmt.Sprintf("[PATCH /account/{uid}/][%d] patchSubaccountForbidden  %+v", 403, o.Payload)
}

func (o *PatchSubaccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchSubaccountForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSubaccountNotFound creates a PatchSubaccountNotFound with default headers values
func NewPatchSubaccountNotFound() *PatchSubaccountNotFound {
	return &PatchSubaccountNotFound{}
}

/*PatchSubaccountNotFound handles this case with default header values.

Resource not found
*/
type PatchSubaccountNotFound struct {
	Payload *models.PatchSubaccountNotFoundBody
}

func (o *PatchSubaccountNotFound) Error() string {
	return fmt.Sprintf("[PATCH /account/{uid}/][%d] patchSubaccountNotFound  %+v", 404, o.Payload)
}

func (o *PatchSubaccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchSubaccountNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSubaccountInternalServerError creates a PatchSubaccountInternalServerError with default headers values
func NewPatchSubaccountInternalServerError() *PatchSubaccountInternalServerError {
	return &PatchSubaccountInternalServerError{}
}

/*PatchSubaccountInternalServerError handles this case with default header values.

Error
*/
type PatchSubaccountInternalServerError struct {
	Payload *models.PatchSubaccountInternalServerErrorBody
}

func (o *PatchSubaccountInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /account/{uid}/][%d] patchSubaccountInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchSubaccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchSubaccountInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
