// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// GetSubaccountByIDReader is a Reader for the GetSubaccountByID structure.
type GetSubaccountByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubaccountByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSubaccountByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetSubaccountByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSubaccountByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSubaccountByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSubaccountByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSubaccountByIDOK creates a GetSubaccountByIDOK with default headers values
func NewGetSubaccountByIDOK() *GetSubaccountByIDOK {
	return &GetSubaccountByIDOK{}
}

/*GetSubaccountByIDOK handles this case with default header values.

A subaccount object
*/
type GetSubaccountByIDOK struct {
	Payload *GetSubaccountByIDOKBody
}

func (o *GetSubaccountByIDOK) Error() string {
	return fmt.Sprintf("[GET /account/{uid}/][%d] getSubaccountByIdOK  %+v", 200, o.Payload)
}

func (o *GetSubaccountByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubaccountByIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubaccountByIDUnauthorized creates a GetSubaccountByIDUnauthorized with default headers values
func NewGetSubaccountByIDUnauthorized() *GetSubaccountByIDUnauthorized {
	return &GetSubaccountByIDUnauthorized{}
}

/*GetSubaccountByIDUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type GetSubaccountByIDUnauthorized struct {
	WWWAuthenticate string
}

func (o *GetSubaccountByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /account/{uid}/][%d] getSubaccountByIdUnauthorized ", 401)
}

func (o *GetSubaccountByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewGetSubaccountByIDForbidden creates a GetSubaccountByIDForbidden with default headers values
func NewGetSubaccountByIDForbidden() *GetSubaccountByIDForbidden {
	return &GetSubaccountByIDForbidden{}
}

/*GetSubaccountByIDForbidden handles this case with default header values.

User not authorized or blocked
*/
type GetSubaccountByIDForbidden struct {
	Payload *GetSubaccountByIDForbiddenBody
}

func (o *GetSubaccountByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /account/{uid}/][%d] getSubaccountByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetSubaccountByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubaccountByIDForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubaccountByIDNotFound creates a GetSubaccountByIDNotFound with default headers values
func NewGetSubaccountByIDNotFound() *GetSubaccountByIDNotFound {
	return &GetSubaccountByIDNotFound{}
}

/*GetSubaccountByIDNotFound handles this case with default header values.

Resource not found
*/
type GetSubaccountByIDNotFound struct {
	Payload *GetSubaccountByIDNotFoundBody
}

func (o *GetSubaccountByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /account/{uid}/][%d] getSubaccountByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetSubaccountByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubaccountByIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubaccountByIDInternalServerError creates a GetSubaccountByIDInternalServerError with default headers values
func NewGetSubaccountByIDInternalServerError() *GetSubaccountByIDInternalServerError {
	return &GetSubaccountByIDInternalServerError{}
}

/*GetSubaccountByIDInternalServerError handles this case with default header values.

Error
*/
type GetSubaccountByIDInternalServerError struct {
	Payload *GetSubaccountByIDInternalServerErrorBody
}

func (o *GetSubaccountByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /account/{uid}/][%d] getSubaccountByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSubaccountByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubaccountByIDInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSubaccountByIDForbiddenBody UnauthorizedResponse
swagger:model GetSubaccountByIDForbiddenBody
*/
type GetSubaccountByIDForbiddenBody struct {

	// error
	Error *GetSubaccountByIDForbiddenBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this get subaccount by ID forbidden body
func (o *GetSubaccountByIDForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountByIDForbiddenBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountByIdForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubaccountByIDForbiddenBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountByIdForbidden" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountByIDForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountByIDForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetSubaccountByIDForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountByIDForbiddenBodyError get subaccount by ID forbidden body error
swagger:model GetSubaccountByIDForbiddenBodyError
*/
type GetSubaccountByIDForbiddenBodyError struct {

	// Forbidden Message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get subaccount by ID forbidden body error
func (o *GetSubaccountByIDForbiddenBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountByIDForbiddenBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSubaccountByIdForbidden"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountByIDForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountByIDForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res GetSubaccountByIDForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountByIDInternalServerErrorBody ErrorResponse
swagger:model GetSubaccountByIDInternalServerErrorBody
*/
type GetSubaccountByIDInternalServerErrorBody struct {

	// error
	Error *GetSubaccountByIDInternalServerErrorBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this get subaccount by ID internal server error body
func (o *GetSubaccountByIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountByIDInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountByIdInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubaccountByIDInternalServerErrorBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountByIdInternalServerError" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountByIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountByIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetSubaccountByIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountByIDInternalServerErrorBodyError get subaccount by ID internal server error body error
swagger:model GetSubaccountByIDInternalServerErrorBodyError
*/
type GetSubaccountByIDInternalServerErrorBodyError struct {

	// Error Message
	// Required: true
	Message *string `json:"message"`

	// Parameter the error message is related to
	// `null` is the error is generic
	//
	Param *string `json:"param,omitempty"`
}

// Validate validates this get subaccount by ID internal server error body error
func (o *GetSubaccountByIDInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountByIDInternalServerErrorBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSubaccountByIdInternalServerError"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountByIDInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountByIDInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res GetSubaccountByIDInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountByIDNotFoundBody NotFoundResponse
swagger:model GetSubaccountByIDNotFoundBody
*/
type GetSubaccountByIDNotFoundBody struct {

	// error
	Error *GetSubaccountByIDNotFoundBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this get subaccount by ID not found body
func (o *GetSubaccountByIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountByIDNotFoundBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountByIdNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubaccountByIDNotFoundBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountByIdNotFound" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountByIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountByIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSubaccountByIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountByIDNotFoundBodyError get subaccount by ID not found body error
swagger:model GetSubaccountByIDNotFoundBodyError
*/
type GetSubaccountByIDNotFoundBodyError struct {

	// Error Message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get subaccount by ID not found body error
func (o *GetSubaccountByIDNotFoundBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountByIDNotFoundBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSubaccountByIdNotFound"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountByIDNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountByIDNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res GetSubaccountByIDNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubaccountByIDOKBody AccountResponse
swagger:model GetSubaccountByIDOKBody
*/
type GetSubaccountByIDOKBody struct {

	// data
	Data *models.Account `json:"data,omitempty"`

	// meta
	Meta *models.ObjectMetaResponse `json:"meta,omitempty"`
}

// Validate validates this get subaccount by ID o k body
func (o *GetSubaccountByIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubaccountByIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountByIdOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubaccountByIDOKBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubaccountByIdOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubaccountByIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubaccountByIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetSubaccountByIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
