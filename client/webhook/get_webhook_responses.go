// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// GetWebhookReader is a Reader for the GetWebhook structure.
type GetWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetWebhookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetWebhookForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetWebhookInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetWebhookOK creates a GetWebhookOK with default headers values
func NewGetWebhookOK() *GetWebhookOK {
	return &GetWebhookOK{}
}

/*GetWebhookOK handles this case with default header values.

A subaccount object
*/
type GetWebhookOK struct {
	Payload *GetWebhookOKBody
}

func (o *GetWebhookOK) Error() string {
	return fmt.Sprintf("[GET /webhook/][%d] getWebhookOK  %+v", 200, o.Payload)
}

func (o *GetWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWebhookOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookUnauthorized creates a GetWebhookUnauthorized with default headers values
func NewGetWebhookUnauthorized() *GetWebhookUnauthorized {
	return &GetWebhookUnauthorized{}
}

/*GetWebhookUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type GetWebhookUnauthorized struct {
	WWWAuthenticate string
}

func (o *GetWebhookUnauthorized) Error() string {
	return fmt.Sprintf("[GET /webhook/][%d] getWebhookUnauthorized ", 401)
}

func (o *GetWebhookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewGetWebhookForbidden creates a GetWebhookForbidden with default headers values
func NewGetWebhookForbidden() *GetWebhookForbidden {
	return &GetWebhookForbidden{}
}

/*GetWebhookForbidden handles this case with default header values.

User not authorized or blocked
*/
type GetWebhookForbidden struct {
	Payload *GetWebhookForbiddenBody
}

func (o *GetWebhookForbidden) Error() string {
	return fmt.Sprintf("[GET /webhook/][%d] getWebhookForbidden  %+v", 403, o.Payload)
}

func (o *GetWebhookForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWebhookForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookInternalServerError creates a GetWebhookInternalServerError with default headers values
func NewGetWebhookInternalServerError() *GetWebhookInternalServerError {
	return &GetWebhookInternalServerError{}
}

/*GetWebhookInternalServerError handles this case with default header values.

Error
*/
type GetWebhookInternalServerError struct {
	Payload *GetWebhookInternalServerErrorBody
}

func (o *GetWebhookInternalServerError) Error() string {
	return fmt.Sprintf("[GET /webhook/][%d] getWebhookInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebhookInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWebhookInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetWebhookForbiddenBody UnauthorizedResponse
swagger:model GetWebhookForbiddenBody
*/
type GetWebhookForbiddenBody struct {

	// error
	Error *GetWebhookForbiddenBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this get webhook forbidden body
func (o *GetWebhookForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWebhookForbiddenBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWebhookForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetWebhookForbiddenBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWebhookForbidden" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWebhookForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWebhookForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetWebhookForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetWebhookForbiddenBodyError get webhook forbidden body error
swagger:model GetWebhookForbiddenBodyError
*/
type GetWebhookForbiddenBodyError struct {

	// Forbidden Message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get webhook forbidden body error
func (o *GetWebhookForbiddenBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWebhookForbiddenBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getWebhookForbidden"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWebhookForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWebhookForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res GetWebhookForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetWebhookInternalServerErrorBody ErrorResponse
swagger:model GetWebhookInternalServerErrorBody
*/
type GetWebhookInternalServerErrorBody struct {

	// error
	Error *GetWebhookInternalServerErrorBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this get webhook internal server error body
func (o *GetWebhookInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWebhookInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWebhookInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetWebhookInternalServerErrorBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWebhookInternalServerError" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWebhookInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWebhookInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetWebhookInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetWebhookInternalServerErrorBodyError get webhook internal server error body error
swagger:model GetWebhookInternalServerErrorBodyError
*/
type GetWebhookInternalServerErrorBodyError struct {

	// Error Message
	// Required: true
	Message *string `json:"message"`

	// Parameter the error message is related to
	// `null` is the error is generic
	//
	Param *string `json:"param,omitempty"`
}

// Validate validates this get webhook internal server error body error
func (o *GetWebhookInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWebhookInternalServerErrorBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getWebhookInternalServerError"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWebhookInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWebhookInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res GetWebhookInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetWebhookOKBody WebhookListResponse
swagger:model GetWebhookOKBody
*/
type GetWebhookOKBody struct {

	// meta
	Meta *models.ArrayMetaResponse `json:"meta,omitempty"`

	// objects
	Objects []*models.Webhook `json:"objects"`
}

// Validate validates this get webhook o k body
func (o *GetWebhookOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWebhookOKBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWebhookOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

func (o *GetWebhookOKBody) validateObjects(formats strfmt.Registry) error {

	if swag.IsZero(o.Objects) { // not required
		return nil
	}

	for i := 0; i < len(o.Objects); i++ {
		if swag.IsZero(o.Objects[i]) { // not required
			continue
		}

		if o.Objects[i] != nil {
			if err := o.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getWebhookOK" + "." + "objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWebhookOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWebhookOKBody) UnmarshalBinary(b []byte) error {
	var res GetWebhookOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
