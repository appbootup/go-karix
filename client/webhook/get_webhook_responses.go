// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// GetWebhookReader is a Reader for the GetWebhook structure.
type GetWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetWebhookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetWebhookForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetWebhookInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetWebhookOK creates a GetWebhookOK with default headers values
func NewGetWebhookOK() *GetWebhookOK {
	return &GetWebhookOK{}
}

/*GetWebhookOK handles this case with default header values.

A subaccount object
*/
type GetWebhookOK struct {
	Payload *models.GetWebhookOKBody
}

func (o *GetWebhookOK) Error() string {
	return fmt.Sprintf("[GET /webhook/][%d] getWebhookOK  %+v", 200, o.Payload)
}

func (o *GetWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhookOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookUnauthorized creates a GetWebhookUnauthorized with default headers values
func NewGetWebhookUnauthorized() *GetWebhookUnauthorized {
	return &GetWebhookUnauthorized{}
}

/*GetWebhookUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type GetWebhookUnauthorized struct {
	WWWAuthenticate string
}

func (o *GetWebhookUnauthorized) Error() string {
	return fmt.Sprintf("[GET /webhook/][%d] getWebhookUnauthorized ", 401)
}

func (o *GetWebhookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewGetWebhookForbidden creates a GetWebhookForbidden with default headers values
func NewGetWebhookForbidden() *GetWebhookForbidden {
	return &GetWebhookForbidden{}
}

/*GetWebhookForbidden handles this case with default header values.

User not authorized or blocked
*/
type GetWebhookForbidden struct {
	Payload *models.GetWebhookForbiddenBody
}

func (o *GetWebhookForbidden) Error() string {
	return fmt.Sprintf("[GET /webhook/][%d] getWebhookForbidden  %+v", 403, o.Payload)
}

func (o *GetWebhookForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhookForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookInternalServerError creates a GetWebhookInternalServerError with default headers values
func NewGetWebhookInternalServerError() *GetWebhookInternalServerError {
	return &GetWebhookInternalServerError{}
}

/*GetWebhookInternalServerError handles this case with default header values.

Error
*/
type GetWebhookInternalServerError struct {
	Payload *models.GetWebhookInternalServerErrorBody
}

func (o *GetWebhookInternalServerError) Error() string {
	return fmt.Sprintf("[GET /webhook/][%d] getWebhookInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebhookInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhookInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
