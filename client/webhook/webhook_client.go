// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new webhook API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhook API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateWebhook creates webhooks to receive message

To receive messages you will need to setup a webhook. A webhook is then attached to your phone number.
*/
func (a *Client) CreateWebhook(params *CreateWebhookParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWebhookCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWebhook",
		Method:             "POST",
		PathPattern:        "/webhook/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWebhookCreated), nil

}

/*
DeleteWebhookByID deletes a webhook by ID

Delete a webhook by ID
*/
func (a *Client) DeleteWebhookByID(params *DeleteWebhookByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWebhookByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebhookByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWebhookById",
		Method:             "DELETE",
		PathPattern:        "/webhook/{uid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebhookByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebhookByIDNoContent), nil

}

/*
GetWebhook gets a list of your webhooks

Get a list of your webhooks
*/
func (a *Client) GetWebhook(params *GetWebhookParams, authInfo runtime.ClientAuthInfoWriter) (*GetWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebhook",
		Method:             "GET",
		PathPattern:        "/webhook/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebhookOK), nil

}

/*
GetWebhookByID gets a webhook by ID

Get a webhook by ID
*/
func (a *Client) GetWebhookByID(params *GetWebhookByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetWebhookByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhookByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebhookById",
		Method:             "GET",
		PathPattern:        "/webhook/{uid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebhookByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebhookByIDOK), nil

}

/*
PatchWebhook edits a webhook

Edit a webhook
*/
func (a *Client) PatchWebhook(params *PatchWebhookParams, authInfo runtime.ClientAuthInfoWriter) (*PatchWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWebhookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWebhook",
		Method:             "PATCH",
		PathPattern:        "/webhook/{uid}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWebhookOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
