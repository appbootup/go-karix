// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// PatchWebhookReader is a Reader for the PatchWebhook structure.
type PatchWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchWebhookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchWebhookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchWebhookForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchWebhookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchWebhookInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchWebhookOK creates a PatchWebhookOK with default headers values
func NewPatchWebhookOK() *PatchWebhookOK {
	return &PatchWebhookOK{}
}

/*PatchWebhookOK handles this case with default header values.

Webhook data
*/
type PatchWebhookOK struct {
	Payload *models.PatchWebhookOKBody
}

func (o *PatchWebhookOK) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookOK  %+v", 200, o.Payload)
}

func (o *PatchWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchWebhookOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebhookBadRequest creates a PatchWebhookBadRequest with default headers values
func NewPatchWebhookBadRequest() *PatchWebhookBadRequest {
	return &PatchWebhookBadRequest{}
}

/*PatchWebhookBadRequest handles this case with default header values.

Error
*/
type PatchWebhookBadRequest struct {
	Payload *models.PatchWebhookBadRequestBody
}

func (o *PatchWebhookBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *PatchWebhookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchWebhookBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebhookUnauthorized creates a PatchWebhookUnauthorized with default headers values
func NewPatchWebhookUnauthorized() *PatchWebhookUnauthorized {
	return &PatchWebhookUnauthorized{}
}

/*PatchWebhookUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type PatchWebhookUnauthorized struct {
	WWWAuthenticate string
}

func (o *PatchWebhookUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookUnauthorized ", 401)
}

func (o *PatchWebhookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewPatchWebhookForbidden creates a PatchWebhookForbidden with default headers values
func NewPatchWebhookForbidden() *PatchWebhookForbidden {
	return &PatchWebhookForbidden{}
}

/*PatchWebhookForbidden handles this case with default header values.

User not authorized or blocked
*/
type PatchWebhookForbidden struct {
	Payload *models.PatchWebhookForbiddenBody
}

func (o *PatchWebhookForbidden) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookForbidden  %+v", 403, o.Payload)
}

func (o *PatchWebhookForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchWebhookForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebhookNotFound creates a PatchWebhookNotFound with default headers values
func NewPatchWebhookNotFound() *PatchWebhookNotFound {
	return &PatchWebhookNotFound{}
}

/*PatchWebhookNotFound handles this case with default header values.

Resource not found
*/
type PatchWebhookNotFound struct {
	Payload *models.PatchWebhookNotFoundBody
}

func (o *PatchWebhookNotFound) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookNotFound  %+v", 404, o.Payload)
}

func (o *PatchWebhookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchWebhookNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebhookInternalServerError creates a PatchWebhookInternalServerError with default headers values
func NewPatchWebhookInternalServerError() *PatchWebhookInternalServerError {
	return &PatchWebhookInternalServerError{}
}

/*PatchWebhookInternalServerError handles this case with default header values.

Error
*/
type PatchWebhookInternalServerError struct {
	Payload *models.PatchWebhookInternalServerErrorBody
}

func (o *PatchWebhookInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchWebhookInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchWebhookInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
