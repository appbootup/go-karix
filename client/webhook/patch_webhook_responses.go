// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// PatchWebhookReader is a Reader for the PatchWebhook structure.
type PatchWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchWebhookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchWebhookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchWebhookForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchWebhookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchWebhookInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchWebhookOK creates a PatchWebhookOK with default headers values
func NewPatchWebhookOK() *PatchWebhookOK {
	return &PatchWebhookOK{}
}

/*PatchWebhookOK handles this case with default header values.

Webhook data
*/
type PatchWebhookOK struct {
	Payload *PatchWebhookOKBody
}

func (o *PatchWebhookOK) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookOK  %+v", 200, o.Payload)
}

func (o *PatchWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchWebhookOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebhookBadRequest creates a PatchWebhookBadRequest with default headers values
func NewPatchWebhookBadRequest() *PatchWebhookBadRequest {
	return &PatchWebhookBadRequest{}
}

/*PatchWebhookBadRequest handles this case with default header values.

Error
*/
type PatchWebhookBadRequest struct {
	Payload *PatchWebhookBadRequestBody
}

func (o *PatchWebhookBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *PatchWebhookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchWebhookBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebhookUnauthorized creates a PatchWebhookUnauthorized with default headers values
func NewPatchWebhookUnauthorized() *PatchWebhookUnauthorized {
	return &PatchWebhookUnauthorized{}
}

/*PatchWebhookUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type PatchWebhookUnauthorized struct {
	WWWAuthenticate string
}

func (o *PatchWebhookUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookUnauthorized ", 401)
}

func (o *PatchWebhookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewPatchWebhookForbidden creates a PatchWebhookForbidden with default headers values
func NewPatchWebhookForbidden() *PatchWebhookForbidden {
	return &PatchWebhookForbidden{}
}

/*PatchWebhookForbidden handles this case with default header values.

User not authorized or blocked
*/
type PatchWebhookForbidden struct {
	Payload *PatchWebhookForbiddenBody
}

func (o *PatchWebhookForbidden) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookForbidden  %+v", 403, o.Payload)
}

func (o *PatchWebhookForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchWebhookForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebhookNotFound creates a PatchWebhookNotFound with default headers values
func NewPatchWebhookNotFound() *PatchWebhookNotFound {
	return &PatchWebhookNotFound{}
}

/*PatchWebhookNotFound handles this case with default header values.

Resource not found
*/
type PatchWebhookNotFound struct {
	Payload *PatchWebhookNotFoundBody
}

func (o *PatchWebhookNotFound) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookNotFound  %+v", 404, o.Payload)
}

func (o *PatchWebhookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchWebhookNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWebhookInternalServerError creates a PatchWebhookInternalServerError with default headers values
func NewPatchWebhookInternalServerError() *PatchWebhookInternalServerError {
	return &PatchWebhookInternalServerError{}
}

/*PatchWebhookInternalServerError handles this case with default header values.

Error
*/
type PatchWebhookInternalServerError struct {
	Payload *PatchWebhookInternalServerErrorBody
}

func (o *PatchWebhookInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /webhook/{uid}/][%d] patchWebhookInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchWebhookInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchWebhookInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchWebhookBadRequestBody ErrorResponse
swagger:model PatchWebhookBadRequestBody
*/
type PatchWebhookBadRequestBody struct {

	// error
	Error *PatchWebhookBadRequestBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this patch webhook bad request body
func (o *PatchWebhookBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWebhookBadRequestBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookBadRequest" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PatchWebhookBadRequestBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookBadRequest" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWebhookBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWebhookBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatchWebhookBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWebhookBadRequestBodyError patch webhook bad request body error
swagger:model PatchWebhookBadRequestBodyError
*/
type PatchWebhookBadRequestBodyError struct {

	// Error Message
	// Required: true
	Message *string `json:"message"`

	// Parameter the error message is related to
	// `null` is the error is generic
	//
	Param *string `json:"param,omitempty"`
}

// Validate validates this patch webhook bad request body error
func (o *PatchWebhookBadRequestBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWebhookBadRequestBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("patchWebhookBadRequest"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWebhookBadRequestBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWebhookBadRequestBodyError) UnmarshalBinary(b []byte) error {
	var res PatchWebhookBadRequestBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWebhookForbiddenBody UnauthorizedResponse
swagger:model PatchWebhookForbiddenBody
*/
type PatchWebhookForbiddenBody struct {

	// error
	Error *PatchWebhookForbiddenBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this patch webhook forbidden body
func (o *PatchWebhookForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWebhookForbiddenBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookForbidden" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PatchWebhookForbiddenBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookForbidden" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWebhookForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWebhookForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PatchWebhookForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWebhookForbiddenBodyError patch webhook forbidden body error
swagger:model PatchWebhookForbiddenBodyError
*/
type PatchWebhookForbiddenBodyError struct {

	// Forbidden Message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this patch webhook forbidden body error
func (o *PatchWebhookForbiddenBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWebhookForbiddenBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("patchWebhookForbidden"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWebhookForbiddenBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWebhookForbiddenBodyError) UnmarshalBinary(b []byte) error {
	var res PatchWebhookForbiddenBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWebhookInternalServerErrorBody ErrorResponse
swagger:model PatchWebhookInternalServerErrorBody
*/
type PatchWebhookInternalServerErrorBody struct {

	// error
	Error *PatchWebhookInternalServerErrorBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this patch webhook internal server error body
func (o *PatchWebhookInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWebhookInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookInternalServerError" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PatchWebhookInternalServerErrorBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookInternalServerError" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWebhookInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWebhookInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PatchWebhookInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWebhookInternalServerErrorBodyError patch webhook internal server error body error
swagger:model PatchWebhookInternalServerErrorBodyError
*/
type PatchWebhookInternalServerErrorBodyError struct {

	// Error Message
	// Required: true
	Message *string `json:"message"`

	// Parameter the error message is related to
	// `null` is the error is generic
	//
	Param *string `json:"param,omitempty"`
}

// Validate validates this patch webhook internal server error body error
func (o *PatchWebhookInternalServerErrorBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWebhookInternalServerErrorBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("patchWebhookInternalServerError"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWebhookInternalServerErrorBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWebhookInternalServerErrorBodyError) UnmarshalBinary(b []byte) error {
	var res PatchWebhookInternalServerErrorBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWebhookNotFoundBody NotFoundResponse
swagger:model PatchWebhookNotFoundBody
*/
type PatchWebhookNotFoundBody struct {

	// error
	Error *PatchWebhookNotFoundBodyError `json:"error,omitempty"`

	// meta
	Meta *models.MetaResponse `json:"meta,omitempty"`
}

// Validate validates this patch webhook not found body
func (o *PatchWebhookNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWebhookNotFoundBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookNotFound" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PatchWebhookNotFoundBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookNotFound" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWebhookNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWebhookNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PatchWebhookNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWebhookNotFoundBodyError patch webhook not found body error
swagger:model PatchWebhookNotFoundBodyError
*/
type PatchWebhookNotFoundBodyError struct {

	// Error Message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this patch webhook not found body error
func (o *PatchWebhookNotFoundBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWebhookNotFoundBodyError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("patchWebhookNotFound"+"."+"error"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWebhookNotFoundBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWebhookNotFoundBodyError) UnmarshalBinary(b []byte) error {
	var res PatchWebhookNotFoundBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWebhookOKBody WebhookResponse
swagger:model PatchWebhookOKBody
*/
type PatchWebhookOKBody struct {

	// data
	Data *models.Webhook `json:"data,omitempty"`

	// meta
	Meta *models.ObjectMetaResponse `json:"meta,omitempty"`
}

// Validate validates this patch webhook o k body
func (o *PatchWebhookOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWebhookOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

func (o *PatchWebhookOKBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWebhookOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWebhookOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWebhookOKBody) UnmarshalBinary(b []byte) error {
	var res PatchWebhookOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
