// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// GetWebhookByIDReader is a Reader for the GetWebhookByID structure.
type GetWebhookByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebhookByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetWebhookByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetWebhookByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetWebhookByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetWebhookByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetWebhookByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetWebhookByIDOK creates a GetWebhookByIDOK with default headers values
func NewGetWebhookByIDOK() *GetWebhookByIDOK {
	return &GetWebhookByIDOK{}
}

/*GetWebhookByIDOK handles this case with default header values.

Webhook data
*/
type GetWebhookByIDOK struct {
	Payload *models.GetWebhookByIDOKBody
}

func (o *GetWebhookByIDOK) Error() string {
	return fmt.Sprintf("[GET /webhook/{uid}/][%d] getWebhookByIdOK  %+v", 200, o.Payload)
}

func (o *GetWebhookByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhookByIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookByIDUnauthorized creates a GetWebhookByIDUnauthorized with default headers values
func NewGetWebhookByIDUnauthorized() *GetWebhookByIDUnauthorized {
	return &GetWebhookByIDUnauthorized{}
}

/*GetWebhookByIDUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type GetWebhookByIDUnauthorized struct {
	WWWAuthenticate string
}

func (o *GetWebhookByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /webhook/{uid}/][%d] getWebhookByIdUnauthorized ", 401)
}

func (o *GetWebhookByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewGetWebhookByIDForbidden creates a GetWebhookByIDForbidden with default headers values
func NewGetWebhookByIDForbidden() *GetWebhookByIDForbidden {
	return &GetWebhookByIDForbidden{}
}

/*GetWebhookByIDForbidden handles this case with default header values.

User not authorized or blocked
*/
type GetWebhookByIDForbidden struct {
	Payload *models.GetWebhookByIDForbiddenBody
}

func (o *GetWebhookByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /webhook/{uid}/][%d] getWebhookByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetWebhookByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhookByIDForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookByIDNotFound creates a GetWebhookByIDNotFound with default headers values
func NewGetWebhookByIDNotFound() *GetWebhookByIDNotFound {
	return &GetWebhookByIDNotFound{}
}

/*GetWebhookByIDNotFound handles this case with default header values.

Resource not found
*/
type GetWebhookByIDNotFound struct {
	Payload *models.GetWebhookByIDNotFoundBody
}

func (o *GetWebhookByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /webhook/{uid}/][%d] getWebhookByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetWebhookByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhookByIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookByIDInternalServerError creates a GetWebhookByIDInternalServerError with default headers values
func NewGetWebhookByIDInternalServerError() *GetWebhookByIDInternalServerError {
	return &GetWebhookByIDInternalServerError{}
}

/*GetWebhookByIDInternalServerError handles this case with default header values.

Error
*/
type GetWebhookByIDInternalServerError struct {
	Payload *models.GetWebhookByIDInternalServerErrorBody
}

func (o *GetWebhookByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /webhook/{uid}/][%d] getWebhookByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWebhookByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhookByIDInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
