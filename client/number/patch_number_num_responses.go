// Code generated by go-swagger; DO NOT EDIT.

package number

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/karixtech/go-karix/models"
)

// PatchNumberNumReader is a Reader for the PatchNumberNum structure.
type PatchNumberNumReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchNumberNumReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchNumberNumOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPatchNumberNumUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchNumberNumForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchNumberNumNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPatchNumberNumInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchNumberNumOK creates a PatchNumberNumOK with default headers values
func NewPatchNumberNumOK() *PatchNumberNumOK {
	return &PatchNumberNumOK{}
}

/*PatchNumberNumOK handles this case with default header values.

Number object
*/
type PatchNumberNumOK struct {
	Payload *models.PatchNumberNumOKBody
}

func (o *PatchNumberNumOK) Error() string {
	return fmt.Sprintf("[PATCH /number/{num}/][%d] patchNumberNumOK  %+v", 200, o.Payload)
}

func (o *PatchNumberNumOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchNumberNumOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchNumberNumUnauthorized creates a PatchNumberNumUnauthorized with default headers values
func NewPatchNumberNumUnauthorized() *PatchNumberNumUnauthorized {
	return &PatchNumberNumUnauthorized{}
}

/*PatchNumberNumUnauthorized handles this case with default header values.

Authentication information is missing or invalid
*/
type PatchNumberNumUnauthorized struct {
	WWWAuthenticate string
}

func (o *PatchNumberNumUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /number/{num}/][%d] patchNumberNumUnauthorized ", 401)
}

func (o *PatchNumberNumUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header WWW_Authenticate
	o.WWWAuthenticate = response.GetHeader("WWW_Authenticate")

	return nil
}

// NewPatchNumberNumForbidden creates a PatchNumberNumForbidden with default headers values
func NewPatchNumberNumForbidden() *PatchNumberNumForbidden {
	return &PatchNumberNumForbidden{}
}

/*PatchNumberNumForbidden handles this case with default header values.

User not authorized or blocked
*/
type PatchNumberNumForbidden struct {
	Payload *models.PatchNumberNumForbiddenBody
}

func (o *PatchNumberNumForbidden) Error() string {
	return fmt.Sprintf("[PATCH /number/{num}/][%d] patchNumberNumForbidden  %+v", 403, o.Payload)
}

func (o *PatchNumberNumForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchNumberNumForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchNumberNumNotFound creates a PatchNumberNumNotFound with default headers values
func NewPatchNumberNumNotFound() *PatchNumberNumNotFound {
	return &PatchNumberNumNotFound{}
}

/*PatchNumberNumNotFound handles this case with default header values.

Resource not found
*/
type PatchNumberNumNotFound struct {
	Payload *models.PatchNumberNumNotFoundBody
}

func (o *PatchNumberNumNotFound) Error() string {
	return fmt.Sprintf("[PATCH /number/{num}/][%d] patchNumberNumNotFound  %+v", 404, o.Payload)
}

func (o *PatchNumberNumNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchNumberNumNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchNumberNumInternalServerError creates a PatchNumberNumInternalServerError with default headers values
func NewPatchNumberNumInternalServerError() *PatchNumberNumInternalServerError {
	return &PatchNumberNumInternalServerError{}
}

/*PatchNumberNumInternalServerError handles this case with default header values.

Error
*/
type PatchNumberNumInternalServerError struct {
	Payload *models.PatchNumberNumInternalServerErrorBody
}

func (o *PatchNumberNumInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /number/{num}/][%d] patchNumberNumInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchNumberNumInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchNumberNumInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
